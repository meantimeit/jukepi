var View = require('../view');
var getView = require('../../get-view');
var ModelView = View.extend({
  tagName: 'li',
  className: 'model-view',
  events: {
    'click': '_onClick',
    'keydown': '_onKeydown'
  },
  attributes: function () {
    return {
      role: 'option',
      tabindex: this._tabindex
    };
  },
  selectable: false,
  initialize: function (options) {
    options = options || {};

    if (options.checkable !== undefined) {
      this._checkable = !! options.checkable;
    }
    else if (this.checkable !== undefined) {
      this._checkable = !! this.checkable;
    }

    if (options.selectable !== undefined) {
      this._selectable = !! options.selectable;
    }
    else if (this.selectable !== undefined) {
      this._selectable = !! this.selectable;
    }

    if (this._selectable) {
      this._selected = false;
    }

    if (this._checkable) {
      this._checked = false;
    }

    this._tabindex = options.tabindex !== undefined ? options.tabindex : -1;
    this._model = options.model

    if (typeof this.attributes === 'function') {
      this._setAttributes(this.attributes());
    }

    View.prototype.initialize.call(this, options);
  },
  render: function () {
    this._initialRender = false;

    return View.prototype.render.call(this);
  },
  remove: function () {
    if (this._parent) {
      this._parent._removeView(this);
    }
    else {
      console.log(this);
    }

    View.prototype.remove.call(this);
  },
  initialRenderContent: function () {
    return typeof this._template !== 'function' ? '' : this._template(this._model.toJSON());
  },
  _initializeListeners: function () {
    this.listenTo(this._model, 'change', this.render);
    this.listenTo(this._model, 'remove', this.remove);
  },
  active: function () {
    this._tabindex = 0;
    this.el.setAttribute('tabindex', this._tabindex);
    this.el.setAttribute('aria-selected', 'true');
    this.el.focus();
  },
  inactive: function () {
    this._tabindex = -1;
    this.el.setAttribute('tabindex', this._tabindex);
    this.el.setAttribute('aria-selected', 'false');
  },
  checked: function () {
    this._checked = true;
    this.el.setAttribute('aria-checked', 'true');
  },
  unchecked: function () {
    this._checked = false;
    this.el.setAttribute('aria-checked', 'false');
  },
  isActive: function () {
    return this._tabindex === 0;
  },
  _onClick: function (event) {
    var index = this._parent._views.map(getView).indexOf(this) % this._getNumViews();
    if (this._selectable) {
      this._parent.setSelected(index);
    }

    if (this._checkable) {
      if (event.metaKey || event.ctrlKey) {
        this._parent.setCheckedCtrl(index);
      }
      else if (event.shiftKey) {
        this._parent.setCheckedShift(index);
      }
      else {
        this._parent.setChecked(index);
      }
    }
  },
  _onKeydown: function (event) {
    var right = 39, l = 76, h = 72, left = 37, up = 38, down = 40, j = 74, k = 75, a = 65, index;

    if (this._selectable) {
      // Right
      if (event.which === right || event.which === l || event.which === j || event.which === down) {
        event.preventDefault();
        index = this._getViewIndex() + 1;
        this._parent.setSelected(index % this._getNumViews());
      }
      // Left
      else if (event.which === left || event.which === h || event.which === k || event.which === up) {
        event.preventDefault();
        index = this._getViewIndex() - 1;
        this._parent.setSelected(index < 0 ? this._getNumViews() - 1 : index % this._getNumViews());
      }
    }

    if (this._checkable) {
      // Right
      if (event.which === right || event.which === l || event.which === j || event.which === down) {
        event.preventDefault();
        index = this._getViewIndex() + 1;
        this._parent.setChecked(index % this._getNumViews());
      }
      // Left
      else if (event.which === left || event.which === h || event.which === k || event.which === up) {
        event.preventDefault();
        index = this._getViewIndex() - 1;
        this._parent.setChecked(index < 0 ? this._getNumViews() - 1 : index % this._getNumViews());
      }
      // All
      else if (event.which === a && (event.ctrlKey || event.metaKey)) {
        event.preventDefault();
        this._parent.setCheckedAll();
      }
    }
  },
  _getViewIndex: function () {
    return this._parent._views.map(getView).indexOf(this)
  },
  _getNumViews: function () {
    return this._parent._views.length;
  }
});

module.exports = ModelView;
