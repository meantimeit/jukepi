var getView = require('../../get-view');
var View = require('../view');
var ModelView = require('../model-view');

function toggleTabListViews(views, index) {
  return function (model) {
    toggleTabListView(model, views.indexOf(model) === index);
  }
}

function toggleTabListView(model, matchesIndex) {
  if (matchesIndex) {
    model.get('view').active();
  }
  else {
    model.get('view').inactive();
  }
}

var ViewCollection = require('../../collection/view-collection');
var Collection = require('Backbone').Collection;
var CollectionView = View.extend({
  tagName: 'ul',
  className: 'collection-view',
  selectable: false,
  attributes: {
    'role': 'listbox'
  },
  ModelViewClass: ModelView,
  initialize: function (options) {
    options = options || {};
    var self = this;

    if (options.checkable !== undefined) {
      this._checkable = !! options.checkable;
    }
    else if (this.checkable !== undefined) {
      this._checkable = !! this.checkable;
    }

    if (options.selectable !== undefined) {
      this._selectable = !! options.selectable;
    }
    else if (this.selectable !== undefined) {
      this._selectable = !! this.selectable;
    }

    if (options.collection instanceof Collection.constructor) {
      this._collection = options.collection;
    }
    else if (options.collection instanceof Collection) {
      this._collection = options.collection;
    }
    else if (options.collection && typeof options.collection.models !== 'undefined') {
      this._collection = options.collection;
    }
    else {
      this._collection = new Collection(options.collection);
    }
    options.comparator = options.comparator || function (a, b) {
      return self._collection.indexOf(a.get('view').model) - self._collection.indexOf(b.get('view').model);
    };
    View.prototype.initialize.call(this, options);
    this._views.listenTo(this._collection, 'sort', this._views.sort);
    this.listenTo(this._views, 'sort', this._renderViews);
  },
  render: function () {
    var a = this._views.length ? 'remove' : 'add';
    this.el.classList[a]('loading');

    if (this._checkable && this._views.length) {
      this.setChecked(0);
    }

    if (this._selectable && this._views.length) {
      this.setSelected(0);
    }

    return View.prototype.render.call(this);
  },
  _renderViews: function () {
    return View.prototype._renderViews.call(this);
  },
  _addView: function (model) {
    this._views.push(this._createView(model.get('name'), model));
    this.render();
  },
  _removeView: function (view) {
    var r = this._views.filter(function (v) {
      return v.get('view') == view;
    });

    if (r.length) {
      this._views.remove(r);
    }
  },
  _createView: function (name, model, index) {
    var v = {
      name: name,
      view: new this.ModelViewClass({
        model: model,
        parent: this,
        app: this._app,
        router: this._router,
        tabindex: index === 0 ? 0 : -1,
        checkable: this._checkable,
        selectable: this._selectable
      })
    };

    return v;
  },
  _initializeViews: function (views, comparator) {
    var self = this;
    return new Collection(self._collection.map(function (model, index) {
      return self._createView(model.get('name'), model, index);
    }), {comparator: comparator});
  },
  _initializeListeners: function () {
    this.listenTo(this._collection, 'add', this._addView);
    this.listenTo(this._collection, 'change', this.render);
    this.listenTo(this._collection, 'reset', this.render);
    this.listenTo(this._collection, 'sort', this.render);
  },
  setSelected: function (index) {
    this._views.forEach(toggleTabListViews(this._views, index));
  },
  setChecked: function (index) {
    this._views.each(function (v, i) {
      if (index === i) {
        v.get('view').checked();
      }
      else {
        v.get('view').unchecked();
      }
    });
  },
  getChecked: function () {
    return this._views.map(function (v, i) {
      return v.get('view')._checked ? i : null;
    }).filter(function (i) { return i != null; });
  },
  getCheckedViews: function () {
    var checkedViews = this.getChecked();

    return this.getChecked().map(function (i) {
      return this._views.at(i).get('view');
    }.bind(this));
  },
  setCheckedCtrl: function (index) {
    var checked;

    if (this.getChecked().indexOf(index) > -1) {
      checked = this.getChecked().filter(function (i) {
        return i !== index;
      })
    }
    else {
      checked = this.getChecked();
      checked.push(index);
    }

    this._views.each(function (v, i) {
      if (checked.indexOf(i) > -1) {
        v.get('view').checked();
      }
      else {
        v.get('view').unchecked();
      }
    });
  },
  setCheckedShift: function (index) {
    var checked = this.getChecked();
    var min = Math.min.apply(null, checked);
    var max = Math.max.apply(null, checked);
    var range = [];

    if (index <= min) {
      for (var r = index; r <= max; r++) {
        range.push(r);
      }
    }
    else {
      for (var r = min; r <= index; r++) {
        range.push(r);
      }
    }

    this._views.each(function (v, i) {
      if (range.indexOf(i) > -1) {
        v.get('view').checked();
      }
      else {
        v.get('view').unchecked();
      }
    });
  },
  setCheckedAll: function () {
    this._views.each(function (v) {
      v.get('view').checked();
    })
  }
});

module.exports = CollectionView;
