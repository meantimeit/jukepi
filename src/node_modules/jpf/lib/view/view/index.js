require('backbone.nativeview');
var map = require('../../map');
var debounce = require('../../debounce');
var NativeView = require('backbone').NativeView;
var Collection = require('backbone').Collection;
var ViewCollection = require('../../collection/view-collection');
var forEach = require('../../for-each');
var appendChild = require('../../append-child');
var renderViews = require('../../render-views');
var makeViews = map(function (view) {
  return { name: null, view: view };
});

var View = NativeView.extend({
  initialize: function (options) {
    NativeView.prototype.initialize.call(this, options);
    options = options || {};

    this._initialRender = false;
    if (options.template) {
      this.template = options.template;
    }
    this._parent = options.parent || null;
    this._views = this._initializeViews(options.views || [], options.comparator);
    this._app = options.app || {};
    this._router = options.router || {};
    this._initializeListeners();
  },
  render: function () {
    // Do the rendering of the data
    var rendered = this._renderTemplate()._renderViews();
    // Event
    this.trigger('rendered');
    return rendered;
  },
  remove: function () {
    this.stopListening();
    this._views.forEach(function (view) {
      if (view && view.get && view.get('view')) {
        view.get('view').remove();
      }
    });
    NativeView.prototype.remove.apply(this, arguments);
  },
  initialRenderContent: function () {
    // Override this function to specify a custom procedure for initialising the
    // view content. Currently assumes you'll pass in some sort of data to be rendered
    // by a handlebars function
    return typeof this.template !== 'function' ? '' : this.template();
  },
  // Override this function to specify a custom procedure for initialising the subviews.
  _initializeViews: function (views, comparator) {
    if (Object.prototype.toString.call(views) === '[object Array]') {
      return new Collection(makeViews(views), {
        comparator: comparator
      });
    }

    return views;
  },
  // Override this function to specify any 
  // custom event listeners
  _initializeListeners: function () {
    var self = this;
    var debouncedRenderViews = debounce(500, self._renderViews);
    if (self._views) {
      self.listenTo(self._views, 'add', debouncedRenderViews);
      self.listenTo(self._views, 'change', debouncedRenderViews);
      self.listenTo(self._views, 'reset', debouncedRenderViews);
      self.listenTo(self._views, 'sort', debouncedRenderViews);
      self._views.models.forEach(function (view) {
        view.listenTo(view, 'remove', function () {
          view.get('view').remove();
        });
      });
    }
  },
  _renderTemplate: function () {
    if (!this._initialRender) {
      this.el.innerHTML = this.initialRenderContent();
    }

    return this;
  },
  _renderViews: function () {
    forEach(appendChild(this.el), renderViews(this._views));

    return this;
  }
});

module.exports = View;
